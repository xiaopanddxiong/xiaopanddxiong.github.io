<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>11python虚拟环境</title>
      <link href="/2019/08/29/11python-xu-ni-huan-jing/"/>
      <url>/2019/08/29/11python-xu-ni-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Python虚拟环境"><a href="#Python虚拟环境" class="headerlink" title="Python虚拟环境"></a>Python虚拟环境</h1><blockquote><p>问题：python开发时模块之间右冲突；python2和python3不兼容。</p></blockquote><h2 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h2><ol><li>保证本机包含python2和python3环境</li><li>在系统python3下安装pipenv：<code>pip3 install pipenv</code></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><p>安装包：<code>$ pipenv install</code></p></li><li><p>激活当前项目的虚拟环境：<code>$ pipenv shell</code></p></li><li><p>安装开发依赖包：<code>$ pipenv install pytest --dev</code></p></li><li><p>图形显示包依赖关系：<code>$ pipenv graph</code></p></li><li><p>生成lockfile：<code>$ pipenv lock</code></p></li><li><p>删除所有的安装包：<code>$ pipenv uninstall --all</code></p></li><li><p>删除某个包：<code>pipenv uninstall reuqests</code></p></li><li><p>生成requirements.txt文件：<code>$ pipenv lock -r</code></p></li><li><p>生成dev-packages的requirements.txt文件：<code>$ pipenv lock -r -d</code></p></li></ul><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><blockquote><p>为了虚拟环境管理不混乱，建议按如下步骤操作</p></blockquote><ol><li><p>选择文件夹路径作为虚拟环境，命名不要中文，如：<code>cd ~/mypython3</code></p></li><li><p>创建python3虚拟环境：<code>pipenv --python 3</code>  ；同理创建python2虚拟环境：<code>pipenv --python 2</code> </p></li><li><p>激活虚拟环境：<code>pipenv shell</code></p></li><li><p>虚拟环境下安装库：<code>pip install requests</code> 即可</p></li></ol><h2 id="Pycharm配置虚拟环境"><a href="#Pycharm配置虚拟环境" class="headerlink" title="Pycharm配置虚拟环境"></a>Pycharm配置虚拟环境</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> pipenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用技巧整理</title>
      <link href="/2019/08/28/01mac-skill/"/>
      <url>/2019/08/28/01mac-skill/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac使用技巧整理"><a href="#Mac使用技巧整理" class="headerlink" title="Mac使用技巧整理"></a>Mac使用技巧整理</h1><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h2 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h2><h2 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><hr><h2 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h2><blockquote><p>问题：双击打开md文件时候，每次都自动使用xcode打开，手动更换默认打开方式，下次打开仍然无效。</p></blockquote><ol><li>右击md文件，选择<code>显示简介</code></li><li>找到<code>打开方式</code>，选择打开方式为：<code>Typora</code></li><li>点击<code>全部更改</code>，点击<code>继续</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级测试课程大纲</title>
      <link href="/2019/08/27/article-title/"/>
      <url>/2019/08/27/article-title/</url>
      
        <content type="html"><![CDATA[<h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><p><strong>——潘伟杰</strong></p><h2 id="1-独立开发自动化"><a href="#1-独立开发自动化" class="headerlink" title="1. 独立开发自动化"></a>1. 独立开发自动化</h2><h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><ul><li>分三类：原理理论，编程语言，工具使用</li></ul><h4 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h4><h5 id="http原理"><a href="#http原理" class="headerlink" title="http原理"></a>http原理</h5><ol><li>URL拆解：协议类型，主机，接口，参数</li><li>请求方法：get/post/put/delete</li><li>Request组成：请求头，请求参数，请求体</li><li>Response响应：状态码，响应头，响应体</li></ol><h5 id="抓包工具的使用："><a href="#抓包工具的使用：" class="headerlink" title="抓包工具的使用："></a>抓包工具的使用：</h5><ol><li>工具分类：浏览器，Charles，fiddler</li><li>如何抓包？如何分析？</li><li>实际应用：修改请求参数，mock返回数据</li></ol><h5 id="接口测试用例编写："><a href="#接口测试用例编写：" class="headerlink" title="接口测试用例编写："></a>接口测试用例编写：</h5><ol><li>接口文档分析：接口概述，接口入参，接口出参</li><li>用例设计思路：输入框测试，必填/选填，入参合法性</li></ol><h5 id="cookies和session："><a href="#cookies和session：" class="headerlink" title="cookies和session："></a>cookies和session：</h5><ol><li>cookies原理，cookie的组成，cookie的使用</li><li>重定向相关</li><li>如何绕过登陆，如何使用session关联：python代码实例</li></ol><h5 id="Json数据格式："><a href="#Json数据格式：" class="headerlink" title="Json数据格式："></a>Json数据格式：</h5><ol><li>区分python字典</li><li>post请求如何使用json</li></ol><h5 id="执行测试："><a href="#执行测试：" class="headerlink" title="执行测试："></a>执行测试：</h5><ol><li>浏览器，postman，curl命令，python，java，jmeter</li></ol><h4 id="python编程"><a href="#python编程" class="headerlink" title="python编程"></a>python编程</h4><h5 id="python基础："><a href="#python基础：" class="headerlink" title="python基础："></a>python基础：</h5><ol><li>数据类型</li><li>基本语法</li></ol><h5 id="参数关联："><a href="#参数关联：" class="headerlink" title="参数关联："></a>参数关联：</h5><ol><li><p>什么是参数关联？为什么要参数关联？怎样参数关联？</p></li><li><p>格式化输出：%s 和 {}</p></li><li><p>参数关联的方式：</p><pre class="line-numbers language-python"><code class="language-python">参数关联的方式：<span class="token number">1</span><span class="token punctuation">.</span> 变量直接关联：将上一个步骤<span class="token punctuation">(</span>请求<span class="token punctuation">)</span>获取到的值，<span class="token keyword">return</span>给一个变量，通过该变量传递给下一个方法   <span class="token operator">-</span> 优点：实现最简单，写出来的用例逻辑清晰，可读性强   <span class="token operator">-</span> 缺点：变量很多的时候，关联比较麻烦，需要逐个进行传递，考验测试细心程度；参数传递过程中可能出现转码问题   <span class="token operator">-</span> 场景：几乎任何场景都可以使用<span class="token number">2</span><span class="token punctuation">.</span> 类变量关联：定义<span class="token number">1</span>个类，在类中定义全局变量，上一个步骤<span class="token punctuation">(</span>请求<span class="token punctuation">)</span>获取到的值，存储到全局变量中，下一个方法需要使用时，直接从全局变量中拿   <span class="token operator">-</span> 优点：省去传参过程，精简代码<span class="token punctuation">(</span>用例<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数关联实例：我编写的web服务登陆实例</p></li></ol><h5 id="python接口测试："><a href="#python接口测试：" class="headerlink" title="python接口测试："></a>python接口测试：</h5><ol><li>requests库的使用：get/post，headers，data</li><li>cookies和session的使用</li><li>unittest单元测试框架</li><li><strong>json解析</strong>：python接口测试实例</li><li>html解析：lxml库应用实例</li><li>断言与报告：in/equal/true，html报告</li></ol><h5 id="python扩展："><a href="#python扩展：" class="headerlink" title="python扩展："></a>python扩展：</h5><ol><li>requests-html爬虫框架</li><li>参数化与封装类</li><li>ddt实现数据驱动</li><li>表单提交</li></ol><h4 id="服务器框架"><a href="#服务器框架" class="headerlink" title="服务器框架"></a>服务器框架</h4><ol><li>基础型/增强型框架</li><li>前后端分离</li><li>分布式集群</li><li>引入多种中间件：CouchBase，HBase，ElasticSearch，Hadoop，Redis，Kafka</li></ol><h4 id="Redis操作"><a href="#Redis操作" class="headerlink" title="Redis操作"></a>Redis操作</h4><ol><li>缓存基本原理，引入缓存的背景，缓存的作用</li><li>Redis基本命令</li><li>python操作redis：结合自动化实例讲解</li></ol><h3 id="自动化实现"><a href="#自动化实现" class="headerlink" title="自动化实现"></a>自动化实现</h3><h4 id="自动化思想：-面试问答"><a href="#自动化思想：-面试问答" class="headerlink" title="自动化思想：(面试问答)"></a>自动化思想：(面试问答)</h4><ol><li>为什么要做自动化？回归测试，测试效率，测试准确率，敏捷开发</li><li>什么是自动化？让机器/代码代替人去执行测试</li><li>如何实现自动化？写用例，将用例翻译成为代码语言</li><li>数据驱动设计思想</li><li>关键字驱动设计思想</li></ol><h4 id="工具和框架"><a href="#工具和框架" class="headerlink" title="工具和框架"></a>工具和框架</h4><ul><li>可用框架：RobotFramework，unittest，pytest，junit，jmeter等</li></ul><h4 id="unittest单元测试框架"><a href="#unittest单元测试框架" class="headerlink" title="unittest单元测试框架"></a>unittest单元测试框架</h4><ol><li>基础组成：class类/def方法 = 测试套件/测试用例</li><li>前置与后置</li><li>项目设计结构</li></ol><h4 id="RobotFramework测试框架"><a href="#RobotFramework测试框架" class="headerlink" title="RobotFramework测试框架"></a>RobotFramework测试框架</h4><ol><li>pycharm集成RF</li><li>基础组成：dir项目文件/suite/测试组件/resource资源包/keyword关键字</li><li>各个参数配置说明：外部文件导入/变量定义/属性配置</li><li>自动化用例设计规范</li><li><strong>独立开发的业务测试类</strong>：自动化的核心，也是竞争力所在</li></ol><h3 id="配合工具"><a href="#配合工具" class="headerlink" title="配合工具"></a>配合工具</h3><ul><li>jenkins持续集成：持续集成含义，应用场景，jenkins跑自动化</li><li>配合git使用：git命令，git管理，git结合jenkins</li></ul><h3 id="接口自动化扩展"><a href="#接口自动化扩展" class="headerlink" title="接口自动化扩展"></a>接口自动化扩展</h3><ul><li>测试深度等级划分：<ol><li>仅测试接口的数据交互：requests/json/lxml</li><li>在接口基础上增加数据库校验：<ul><li>直连数据库去查询：pymysql/Mysqldb/sqlalchemy的使用</li><li>通过测试桩去查询：tornado+pymysql</li></ul></li><li>针对单个模块的自动化：redis缓存检查，mq/kafka消费与生产，log日志检查等</li></ol></li><li>测试数据级别：静态数据，动态数据(随机数据)，仿真数据，真实数据</li></ul><h2 id="2-独立编写测试桩"><a href="#2-独立编写测试桩" class="headerlink" title="2. 独立编写测试桩"></a>2. 独立编写测试桩</h2><h2 id="3-学会api性能测试"><a href="#3-学会api性能测试" class="headerlink" title="3. 学会api性能测试"></a>3. 学会api性能测试</h2><h3 id="性能测试概念"><a href="#性能测试概念" class="headerlink" title="性能测试概念"></a>性能测试概念</h3><ul><li>N个人同时进行功能性操作的同时，在确保功能实现正确的前提下，考察服务端应用程序的各项性能指标，以及服务器硬件资源的使用情况</li></ul><h3 id="性能测试方法"><a href="#性能测试方法" class="headerlink" title="性能测试方法"></a>性能测试方法</h3><ul><li>性能测试方法：基准测试/负载测试/压力测试/疲劳强度测试</li></ul><h3 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h3><ul><li>业务性能指标：并发用户数，事物吞吐率，事物平均响应时间，事物成功率</li><li>系统资源性能指标：服务器相关，数据库，网络，缓存，测试设备</li><li>总结：性能瓶颈定位的重点在于性能指标的监控和分析。</li></ul><h3 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h3><ul><li>LoadRunner/Jmeter/Locust对比</li></ul><h3 id="locust使用"><a href="#locust使用" class="headerlink" title="locust使用"></a>locust使用</h3><ul><li>HttpLocust类</li><li>TaskSet类：定义用户行为，规划任务执行顺序，执行任务，休眠等待，中断控制，初始化工作</li><li>脚本增强：参数关联，参数化：循环重复数据，不循环唯一数据，循环唯一数据，检查点即断言</li><li>locust运行模式：单进程，多进程分布式</li><li>脚本调试：基准测试，no-web模式</li><li>执行测试：GUI模式，no-web模式</li><li>测试结果分析，测试报告输出</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
